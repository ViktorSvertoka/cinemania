{"mappings":"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","sources":["src/js/api-service-main.js","src/js/cards-rendering.js","src/js/catalog.js"],"sourcesContent":["import axios from 'axios';\n\nexport default class APIService {\n  constructor() {\n    this.key = '992758a4802a699e8df27d4d6efc34fb';\n    this.baseURL = 'https://api.themoviedb.org/3/';\n    this.page = 1;\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  async getTrends(param) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}trending/movie/${param}?api_key=${this.key}`\n      );\n\n      console.log(response.data.results);\n\n      return response.data.results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getUpcoming() {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}movie/upcoming?api_key=${this.key}`\n      );\n\n      console.log(response.data.results);\n\n      return response.data.results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async searchMovieByQuery(query) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}search/movie?api_key=${this.key}&query=${query}`\n      );\n\n      this.incrementPage();\n\n      console.log(response.data.results);\n\n      return response.data.results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getMovieInfo(id) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}movie/${id}?api_key=${this.key}`\n      );\n\n      console.log(response.data);\n\n      return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getMovieTrailer(id) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}movie/${id}/videos?api_key=${this.key}`\n      );\n\n      console.log(response.data.results[0]);\n\n      return response.data.results[0];\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getGenresList() {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}genre/movie/list?api_key=${this.key}`\n      );\n\n      console.log(response.data.genres);\n\n      return response.data.genres;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getMovieContries() {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}configuration/countries?api_key=${this.key}`\n      );\n\n      console.log(response.data);\n\n      return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","import { emptyStar, fullStar, halfStar } from './stars';\nconst axios = require('axios').default;\n\nexport default async function renderMoviesCards(movies) {\n  // в каталоге рендерится в ul c классом cards__list\n  const movieList = document.querySelector('.cards__list');\n  const POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\n  let markup = '';\n  for (const movie of movies) {\n    const {\n      id,\n      poster_path: poster,\n      title,\n      release_date: date,\n      vote_average: rating,\n    } = movie;\n\n    // Проверка на картинку, можно что-то придумать чтоб грузилось другое\n    if (poster === null || !poster) {\n      continue; // пропускаем фильм без картинки\n    }\n\n    const movieImg = POSTER_URL + poster;\n    const movieGenre = await getGenre(id);\n    const movieYear = await getYear(date);\n    const starRating = await createStarRating(rating);\n    // Надо добавить классы\n    markup += `<li class='cards__list__item'>\n                    <img src='${movieImg}' alt='${title}' width='395' height='574' />\n                    <div>\n                        <h3>${title}</h3>\n                        <p>${movieGenre} <span>${movieYear}</span></p>\n                        ${starRating}\n                    </div>\n                </li>`;\n  }\n\n  movieList.innerHTML = markup;\n}\n\n// Получает год из даты\nfunction getYear(data) {\n  if (!data) {\n    return 'There is no release date';\n  }\n\n  return (year = data.slice(0, 4));\n}\n\n// Получает жанры фильма\nasync function getGenre(movieId) {\n  const API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n  const URL = 'https://api.themoviedb.org/3/movie/';\n\n  try {\n    const response = await axios.get(`${URL}${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    if (response.data.genres.length === 0) {\n      return error;\n    }\n\n    const genres = response.data.genres\n      .slice(0, 2)\n      .map(genre => genre.name)\n      .join(', ');\n\n    return genres;\n  } catch (error) {\n    console.log(error);\n    return 'There are no genres';\n  }\n}\n\n// Преобразует рейтинг в рейтинг из звезд\nfunction createStarRating(data) {\n  let ratingStars = '';\n\n  if (!data) {\n    ratingStars = `${emptyStar.repeat(5)}`;\n    return `<div>${ratingStars}</div>`;\n  }\n\n  const rating = Math.round(data);\n\n  switch (rating) {\n    case 0:\n      ratingStars = `${emptyStar.repeat(5)}`;\n      break;\n    case 1:\n      ratingStars = `${halfStar}${emptyStar.repeat(4)}`;\n      break;\n    case 2:\n      ratingStars = `${fullStar}${emptyStar.repeat(4)}`;\n      break;\n    case 3:\n      ratingStars = `${fullStar}${halfStar}${emptyStar.repeat(3)}`;\n      break;\n    case 4:\n      ratingStars = `${fullStar.repeat(2)}${emptyStar.repeat(3)}`;\n      break;\n    case 5:\n      ratingStars = `${fullStar.repeat(2)}${halfStar}${emptyStar.repeat(2)}`;\n      break;\n    case 6:\n      ratingStars = `${fullStar.repeat(3)}${emptyStar.repeat(2)}`;\n      break;\n    case 7:\n      ratingStars = `${fullStar.repeat(3)}${halfStar}${emptyStar}`;\n      break;\n    case 8:\n      ratingStars = `${fullStar.repeat(4)}${emptyStar}`;\n      break;\n    case 9:\n      ratingStars = `${fullStar.repeat(4)}${halfStar}`;\n      break;\n    case 10:\n      ratingStars = `${fullStar.repeat(5)}`;\n      break;\n    default:\n      throw new Error('Invalid rating');\n  }\n\n  return `<div>${ratingStars}</div>`;\n}\n","import APIService from './api-service-main';\nimport renderMoviesCards from './cards-rendering';\n\nconst movieList = document.querySelector('.cards__list');\nconst messageNoMovie = document.querySelector('.cards__message');\nconst searchForm = document.getElementById('search-form');\nconst searchInput = document.getElementById('searchQuery');\n\nconst apiService = new APIService();\nsetCatalogCards(); \nsearchForm.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  movieList.innerHTML = '';\n\n  searchValue = searchInput.value.trim();\n\n  if (!searchValue) {\n    return;\n  }\n\n  movieList.classList.remove('visually-hidden');\n    messageNoMovie.classList.add('visually-hidden');\n\n  searchMovies(searchValue);\n}\n\nasync function setCatalogCards() {\n\n  try {\n    const response = await apiService.getTrends('week');\n\n    if (response.length === 0 || !response) {\n      return error\n    }\n\n    const movies = response.slice(0, 10);\n\n    renderMoviesCards(movies);\n  } catch (error) {\n    console.log(error);\n    movieList.classList.add('visually-hidden');\n    messageNoMovie.classList.remove('visually-hidden');\n  }\n}\n\nasync function searchMovies(query) {\n\n  try {\n    const response = await apiService.searchMovieByQuery(query);\n\n    if (response.length === 0 || !response) {\n      return error\n    }\n\n    const movies = response.slice(0, 10);\n\n    renderMoviesCards(movies);\n  } catch (error) {\n    console.log(error);\n    movieList.classList.add('visually-hidden');\n    messageNoMovie.classList.remove('visually-hidden');\n  }\n}\n"],"names":["$2shzp","parcelRequire","$1K14w","default","async","$a6921166aaa683a4$export$2e2bcd8739ae039","movies","movieList","document","querySelector","markup","movie","id","poster_path","poster","title","release_date","date","vote_average","rating","$a6921166aaa683a4$var$getGenre","$a6921166aaa683a4$var$getYear","$a6921166aaa683a4$var$createStarRating","innerHTML","data","year","slice","movieId","response","$a6921166aaa683a4$require$axios","get","params","api_key","genres","length","error","map","genre","name","join","console","log","ratingStars","emptyStar","repeat","Math","round","halfStar","fullStar","Error","$9f350005b1f9b186$var$movieList","$9f350005b1f9b186$var$messageNoMovie","$9f350005b1f9b186$var$searchForm","getElementById","$9f350005b1f9b186$var$searchInput","$9f350005b1f9b186$var$apiService","constructor","this","key","baseURL","page","incrementPage","resetPage","param","results","query","getTrends","classList","add","remove","$9f350005b1f9b186$var$setCatalogCards","addEventListener","e","preventDefault","searchValue","value","trim","searchMovieByQuery","$9f350005b1f9b186$var$searchMovies"],"version":3,"file":"catalog.1aade890.js.map"}